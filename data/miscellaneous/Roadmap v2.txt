Gardening App Roadmap (2-Week Plan)

=== GOALS ===
MVP by Sunday (Weeks 1-3 Core Features)
Polish & Deploy Next Week (Weeks 4-5)

=== WEEK 1 (MVP) ===
Tuesday - Backend Finish
- Complete APIs:
  GET /crops?zip=12345&season=summer
  GET /pests?crop=tomato
  POST /soil (pH/N/P/K storage)
  GET /weather?zip=12345 (real or mock)

Wednesday - JavaFX UI
- Home Screen (Plan Garden/Soil/Pest buttons)
- Garden Planner:
  - Zip code dropdown → crop list
  - 4x4 planting grid mockup

Thursday - Frontend Logic
- Pest Alerts screen (show pests for selected crops)
- Link all screens to backend

Friday - Visualizations
- Soil Health BarChart (mock data OK)
- Weather alert label ("Frost warning!")

Saturday - Bug Fixes
- Test full user flow:
  Plan → Plant → Check Pests → View Soil

Sunday - MVP DONE
[Core Features Working]
- Crop planning
- Pest alerts
- Soil tracking
- Weather display

=== WEEK 2 (Polish) ===
Monday - Testing
- Fix API edge cases
- Validate crop/pest data

Tuesday - UI Polish
- Add CSS styling
- Mascot animation (if time)

Wednesday - Deployment
- Backend: Deploy to Railway
- Frontend: Package as .jar

Thursday - Extras
- Gantt chart for crop rotation
- PDF export (Apache PDFBox)

Friday - Documentation
- Record demo video
- Write setup guide

=== TIME-SAVERS ===
1. Mock Data Example:
   @GetMapping("/pests")
   public List<Pest> getPests() {
       return List.of(new Pest("Aphids", "Neem oil"));
   }

2. UI Shortcuts:
   - Use Scene Builder
   - Borrow CSS from:
     github.com/JFXtras/jfxtras-styles

=== DELIVERABLES ===
By Sunday:
Functional MVP with:
- Crop planner
- Pest alerts
- Soil/weather

Next Week:
Demo video/docs